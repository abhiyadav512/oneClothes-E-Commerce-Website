// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  password     String
  role         Role       @default(USER)
  orders       Order[]
  createdAt    DateTime   @default(now())
  CartItem     CartItem[]
  dob          DateTime?
  location     String?
  isVerified   Boolean    @default(false)
  otpHash      String?
  number       Int?
  otpExpriesAt DateTime?
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model CartItem {
  id        Int    @id @default(autoincrement())
  userId    String
  productId String
  quantity  Int    @default(1)

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            String      @id @default(uuid())
  name          String
  description   String
  price         Float
  originalPrice Float?
  stock         Int
  imageUrl      String
  sizes         String[]
  rating        Float?
  isNew         Boolean?    @default(false)
  isTrending    Boolean?    @default(false)
  discount      Int? // e.g., 15%
  isWishlisted  Boolean?    @default(false)
  categoryId    String
  category      Category    @relation(fields: [categoryId], references: [id])
  createdAt     DateTime    @default(now())
  orderItems    OrderItem[]
  cartItems     CartItem[]
}

model Order {
  id                 String  @id @default(uuid())
  userId             String
  user               User    @relation(fields: [userId], references: [id])
  totalPrice         Float
  cancellationReason String?

  status     OrderStatus @default(PENDING)
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
